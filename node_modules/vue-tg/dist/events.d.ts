import { EventCallback } from './sdk';
import { OnEventOptions, OnEventWithOptions } from './types';
export declare const onEvent: OnEventWithOptions<OnEventOptions>;
export declare function onActivated(eventHandler: EventCallback['activated'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onDeactivated(eventHandler: EventCallback['deactivated'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onThemeChanged(eventHandler: EventCallback['themeChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onViewportChanged(eventHandler: EventCallback['viewportChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onSafeAreaChanged(eventHandler: EventCallback['safeAreaChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onContentSafeAreaChanged(eventHandler: EventCallback['contentSafeAreaChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onMainButtonClicked(eventHandler: EventCallback['mainButtonClicked'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onSecondaryButtonClicked(eventHandler: EventCallback['secondaryButtonClicked'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onBackButtonClicked(eventHandler: EventCallback['backButtonClicked'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onSettingsButtonClicked(eventHandler: EventCallback['settingsButtonClicked'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onInvoiceClosed(eventHandler: EventCallback['invoiceClosed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onPopupClosed(eventHandler: EventCallback['popupClosed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onQrTextReceived(eventHandler: EventCallback['qrTextReceived'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onScanQrPopupClosed(eventHandler: EventCallback['scanQrPopupClosed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onClipboardTextReceived(eventHandler: EventCallback['clipboardTextReceived'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onWriteAccessRequested(eventHandler: EventCallback['writeAccessRequested'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onContactRequested(eventHandler: EventCallback['contactRequested'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onBiometricManagerUpdated(eventHandler: EventCallback['biometricManagerUpdated'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onBiometricAuthRequested(eventHandler: EventCallback['biometricAuthRequested'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onBiometricTokenUpdated(eventHandler: EventCallback['biometricTokenUpdated'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onFullscreenChanged(eventHandler: EventCallback['fullscreenChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onFullscreenFailed(eventHandler: EventCallback['fullscreenFailed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onHomeScreenAdded(eventHandler: EventCallback['homeScreenAdded'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onHomeScreenChecked(eventHandler: EventCallback['homeScreenChecked'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onAccelerometerStarted(eventHandler: EventCallback['accelerometerStarted'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onAccelerometerStopped(eventHandler: EventCallback['accelerometerStopped'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onAccelerometerChanged(eventHandler: EventCallback['accelerometerChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onAccelerometerFailed(eventHandler: EventCallback['accelerometerFailed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onDeviceOrientationStarted(eventHandler: EventCallback['deviceOrientationStarted'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onDeviceOrientationStopped(eventHandler: EventCallback['deviceOrientationStopped'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onDeviceOrientationChanged(eventHandler: EventCallback['deviceOrientationChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onDeviceOrientationFailed(eventHandler: EventCallback['deviceOrientationFailed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onGyroscopeStarted(eventHandler: EventCallback['gyroscopeStarted'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onGyroscopeStopped(eventHandler: EventCallback['gyroscopeStopped'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onGyroscopeChanged(eventHandler: EventCallback['gyroscopeChanged'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onGyroscopeFailed(eventHandler: EventCallback['gyroscopeFailed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onLocationManagerUpdated(eventHandler: EventCallback['locationManagerUpdated'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onLocationRequested(eventHandler: EventCallback['locationRequested'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onShareMessageSent(eventHandler: EventCallback['shareMessageSent'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onShareMessageFailed(eventHandler: EventCallback['shareMessageFailed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onEmojiStatusSet(eventHandler: EventCallback['emojiStatusSet'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onEmojiStatusFailed(eventHandler: EventCallback['emojiStatusFailed'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onEmojiStatusAccessRequested(eventHandler: EventCallback['emojiStatusAccessRequested'], options?: OnEventOptions): import('./types').OnEventReturn;
export declare function onFileDownloadRequested(eventHandler: EventCallback['fileDownloadRequested'], options?: OnEventOptions): import('./types').OnEventReturn;
