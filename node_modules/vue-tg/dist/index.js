import { defineComponent as r, onMounted as l, watch as i, nextTick as v, onBeforeUnmount as g, computed as C, createBlock as d, openBlock as p, resolveDynamicComponent as m, withCtx as A, ref as _ } from "vue";
import { n as k, a as w, b as P, m as h, t as x, v as T, l as W, o as M, p as E, r as L, w as q, x as D, y as F, z as I, A as $, B as R, c as O, C as U, d as j, i as Q, D as z, E as H, F as N, G, H as J, I as K, J as X, K as Y, s as Z, L as ee } from "./useSecureStorage-BH7nD19q.mjs";
import { M as Oe, Y as Ue, Z as je, W as Qe, X as ze, N as He, Q as Ne, O as Ge, a0 as Je, a1 as Ke, _ as Xe, $ as Ye, ac as Ze, ab as et, aa as tt, ad as st, S as nt, T as at, a4 as ot, a5 as it, a2 as rt, a3 as ct, U as lt, V as ut, a6 as dt, a7 as pt, P as mt, R as gt, a9 as ft, a8 as ht } from "./useSecureStorage-BH7nD19q.mjs";
import { useAccelerometer as Bt, useBackButton as yt, useBiometricManager as bt, useClipboard as vt, useCloudStorage as Ct, useDeviceOrientation as At, useDeviceStorage as kt, useEmojiStatus as xt, useGyroscope as _t, useHapticFeedback as wt, useHomeScreen as Pt, useLocationManager as Tt, useMainButton as Wt, useMiniApp as Mt, usePopup as Lt, useQrScanner as qt, useSecondaryButton as Vt, useSecureStorage as Et, useSettingsButton as Dt, useTheme as Ft, useViewport as It } from "./6.0.js";
const te = /* @__PURE__ */ r({
  __name: "Alert",
  props: {
    message: {
      type: String,
      required: !0
    }
  },
  emits: ["close"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = k("6.0");
    return s.isVersionAtLeast("6.2") && l(() => {
      s.showAlert(t.message, () => o("close"));
    }), (n, c) => null;
  }
}), se = /* @__PURE__ */ r({
  __name: "BackButton",
  props: {
    visible: { type: Boolean, default: !0 }
  },
  emits: ["click"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = w("6.0");
    return s.isVersionAtLeast("6.1") && (i(
      () => t.visible,
      (n) => {
        n ? s.show() : s.hide();
      }
    ), s.onClick(() => o("click")), l(() => {
      t.visible && v(() => {
        s.show();
      });
    }), g(() => s.hide())), (n, c) => null;
  }
}), ne = /* @__PURE__ */ r({
  __name: "BiometricManager",
  emits: ["init"],
  setup(e, { emit: a }) {
    const t = a, o = P("6.0");
    return o.isVersionAtLeast("7.2") && l(() => o.init(() => t("init"))), (s, n) => null;
  }
}), ae = /* @__PURE__ */ r({
  __name: "ClosingConfirmation",
  setup(e) {
    const a = h("6.0");
    return a.isVersionAtLeast("6.2") && (l(() => {
      a.isClosingConfirmationEnabled.value = !0;
    }), g(() => {
      a.isClosingConfirmationEnabled.value = !1;
    })), (t, o) => null;
  }
}), oe = /* @__PURE__ */ r({
  __name: "Confirm",
  props: {
    message: { type: String, required: !0 }
  },
  emits: ["close"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = k("6.0");
    return s.isVersionAtLeast("6.2") && l(() => s.showConfirm(t.message, (n) => o("close", n))), (n, c) => null;
  }
}), ie = /* @__PURE__ */ r({
  __name: "ExpandedViewport",
  props: {
    force: { type: Boolean, default: !1 }
  },
  setup(e) {
    const a = e, t = x("6.0");
    return t.isVersionAtLeast("7.7") ? (l(() => {
      t.isVerticalSwipesEnabled.value = !1;
    }), g(() => {
      t.isVerticalSwipesEnabled.value = !0;
    })) : (i(
      () => a.force,
      (o) => {
        o && !t.isExpanded.value && t.expand();
      },
      { immediate: !0 }
    ), T(({ isStateStable: o }) => {
      a.force && o && !t.isExpanded.value && t.expand();
    })), l(() => t.expand()), (o, s) => null;
  }
}), re = /* @__PURE__ */ r({
  __name: "FullscreenViewport",
  setup(e) {
    const a = x("6.0");
    return a.isVersionAtLeast("8.0") && (l(() => {
      a.isFullscreen.value = !0;
    }), g(() => {
      a.isFullscreen.value = !1;
    })), (t, o) => null;
  }
}), ce = /* @__PURE__ */ r({
  __name: "MainButton",
  props: {
    text: { type: String },
    color: { type: String },
    textColor: { type: String },
    visible: { type: Boolean, default: !0 },
    disabled: { type: Boolean, default: !1 },
    progress: { type: Boolean, default: !1 },
    hasShineEffect: { type: Boolean, default: !1 }
  },
  emits: ["click"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = W("6.0");
    return i(
      () => t.text,
      (n) => {
        s.setParams({
          text: n
        });
      }
    ), i(
      () => t.color,
      (n) => {
        s.setParams({
          color: n
        });
      }
    ), i(
      () => t.textColor,
      (n) => {
        s.setParams({
          text_color: n
        });
      }
    ), i(
      () => t.visible,
      (n) => {
        s.setParams({
          is_visible: n
        });
      }
    ), i(
      () => t.disabled,
      (n) => {
        s.setParams({
          is_active: !n
        });
      }
    ), i(
      () => t.progress,
      (n) => {
        n ? s.showProgress() : s.hideProgress();
      }
    ), s.isVersionAtLeast("7.10") && i(
      () => t.hasShineEffect,
      (n) => {
        s.hasShineEffect.value = n;
      }
    ), s.onClick(() => o("click")), l(() => {
      v(() => {
        t.progress ? s.showProgress() : s.hideProgress(), s.setParams({
          text: t.text,
          text_color: t.textColor,
          color: t.color,
          has_shine_effect: t.hasShineEffect,
          is_active: !t.disabled,
          is_visible: t.visible
        });
      });
    }), g(() => {
      s.hideProgress(), s.hide();
    }), (n, c) => null;
  }
}), le = /* @__PURE__ */ r({
  __name: "Popup",
  props: {
    title: { type: String },
    message: { type: String, required: !0 },
    buttons: { type: Array }
  },
  emits: ["close"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = k("6.0");
    return s.isVersionAtLeast("6.2") && l(
      () => s.showPopup(
        {
          title: t.title,
          message: t.message,
          buttons: t.buttons
        },
        (n) => o("close", n)
      )
    ), (n, c) => null;
  }
}), ue = /* @__PURE__ */ r({
  __name: "ScanQr",
  props: {
    text: { type: String }
  },
  emits: ["result"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = M("6.0");
    return s.isVersionAtLeast("6.4") && (l(() => {
      s.show(
        {
          text: t.text
        },
        (n) => o("result", n)
      );
    }), g(() => {
      s.close();
    })), (n, c) => null;
  }
}), de = /* @__PURE__ */ r({
  __name: "SecondaryButton",
  props: {
    text: { type: String },
    color: { type: String },
    textColor: { type: String },
    visible: { type: Boolean, default: !0 },
    disabled: { type: Boolean, default: !1 },
    progress: { type: Boolean, default: !1 },
    hasShineEffect: { type: Boolean, default: !1 },
    position: { type: String }
  },
  emits: ["click"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = E("6.0");
    return s.isVersionAtLeast("7.10") && (i(
      () => t.text,
      (n) => {
        s.setParams({
          text: n
        });
      }
    ), i(
      () => t.color,
      (n) => {
        s.setParams({
          color: n
        });
      }
    ), i(
      () => t.textColor,
      (n) => {
        s.setParams({
          text_color: n
        });
      }
    ), i(
      () => t.visible,
      (n) => {
        s.setParams({
          is_visible: n
        });
      }
    ), i(
      () => t.disabled,
      (n) => {
        s.setParams({
          is_active: !n
        });
      }
    ), i(
      () => t.progress,
      (n) => {
        n ? s.showProgress() : s.hideProgress();
      }
    ), i(
      () => t.hasShineEffect,
      (n) => {
        s.hasShineEffect.value = n;
      }
    ), i(
      () => t.position,
      (n) => {
        s.position.value = n;
      }
    ), s.onClick(() => o("click")), l(() => {
      v(() => {
        t.progress ? s.showProgress() : s.hideProgress(), s.setParams({
          text: t.text,
          text_color: t.textColor,
          color: t.color,
          has_shine_effect: t.hasShineEffect,
          position: t.position,
          is_active: !t.disabled,
          is_visible: t.visible
        });
      });
    }), g(() => {
      s.hideProgress(), s.hide();
    })), (n, c) => null;
  }
}), pe = /* @__PURE__ */ r({
  __name: "SettingsButton",
  props: {
    visible: { type: Boolean, default: !0 }
  },
  emits: ["click"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = L("6.0");
    return s.isVersionAtLeast("7.0") && (i(
      () => t.visible,
      (n) => {
        n ? s.show() : s.hide();
      }
    ), s.onClick(() => o("click")), l(() => {
      t.visible && v(() => {
        s.show();
      });
    }), g(() => {
      s.hide();
    })), (n, c) => null;
  }
}), me = /* @__PURE__ */ r({
  __name: "DiscussionWidget",
  props: {
    url: {
      type: String,
      required: !0
    },
    commentsLimit: {
      type: Number,
      default: null
    },
    height: {
      type: String,
      default: null
    },
    color: {
      type: String,
      default: null
    },
    darkColor: {
      type: String,
      default: null
    },
    dark: {
      type: Boolean,
      default: null
    },
    colorful: {
      type: Boolean,
      default: null
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const a = e, t = C(() => JSON.stringify(a));
    return (o, s) => (p(), d(m(e.tag), { key: t.value }, {
      default: A(() => [
        (p(), d(m("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-discussion": e.url,
          "data-comments-limit": e.commentsLimit,
          "data-height": e.height,
          "data-color": e.color,
          "data-dark-color": e.darkColor,
          "data-dark": e.dark,
          "data-colorful": e.colorful
        }, null, 8, ["data-telegram-discussion", "data-comments-limit", "data-height", "data-color", "data-dark-color", "data-dark", "data-colorful"]))
      ]),
      _: 1
    }));
  }
}), ge = /* @__PURE__ */ r({
  __name: "LoginWidget",
  props: {
    botUsername: {
      type: String,
      required: !0
    },
    redirectUrl: {
      type: String,
      default: null
    },
    size: {
      type: String,
      default: null
    },
    cornerRadius: {
      type: String,
      default: null
    },
    userPhoto: {
      type: Boolean,
      default: null
    },
    requestWrite: {
      type: Boolean,
      default: !1
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  emits: ["auth"],
  setup(e, { emit: a }) {
    const t = e, o = a, s = C(() => JSON.stringify(t));
    return l(() => {
      window.onTelegramAuth = (n) => o("auth", n);
    }), (n, c) => (p(), d(m(e.tag), { key: s.value }, {
      default: A(() => [
        (p(), d(m("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-login": e.botUsername,
          "data-size": e.size,
          "data-radius": e.cornerRadius,
          "data-userpic": e.userPhoto,
          "data-request-access": e.requestWrite ? "write" : null,
          "data-onauth": e.redirectUrl ? null : "onTelegramAuth(user)",
          "data-auth-url": e.redirectUrl
        }, null, 8, ["data-telegram-login", "data-size", "data-radius", "data-userpic", "data-request-access", "data-onauth", "data-auth-url"]))
      ]),
      _: 1
    }));
  }
}), fe = /* @__PURE__ */ r({
  __name: "PostWidget",
  props: {
    url: {
      type: String,
      required: !0
    },
    width: {
      type: String,
      default: null
    },
    authorPhoto: {
      type: Boolean,
      default: null
    },
    color: {
      type: String,
      default: null
    },
    darkColor: {
      type: String,
      default: null
    },
    dark: {
      type: Boolean,
      default: null
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const a = e, t = C(() => JSON.stringify(a));
    return (o, s) => (p(), d(m(e.tag), { key: t.value }, {
      default: A(() => [
        (p(), d(m("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-post": e.url,
          "data-width": e.width,
          "data-userpic": e.authorPhoto,
          "data-color": e.color,
          "data-dark-color": e.darkColor,
          "data-dark": e.dark
        }, null, 8, ["data-telegram-post", "data-width", "data-userpic", "data-color", "data-dark-color", "data-dark"]))
      ]),
      _: 1
    }));
  }
}), he = /* @__PURE__ */ r({
  __name: "ShareWidget",
  props: {
    url: {
      type: String,
      required: !0
    },
    comment: {
      type: String,
      default: null
    },
    size: {
      type: String,
      default: null
    },
    noLabel: {
      type: Boolean,
      default: !1
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const a = e, t = C(() => JSON.stringify(a));
    return (o, s) => (p(), d(m(e.tag), { key: t.value }, {
      default: A(() => [
        (p(), d(m("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-share-url": e.url,
          "data-size": e.size,
          "data-comment": e.comment,
          "data-text": e.noLabel ? "notext" : null
        }, null, 8, ["data-telegram-share-url", "data-size", "data-comment", "data-text"]))
      ]),
      _: 1
    }));
  }
}), Se = {
  ClosingConfirmation: "6.2",
  CloudStorage: "6.9",
  RequestWriteAccess: "6.9",
  RequestContact: "6.9",
  SettingsButton: "7.0",
  BiometricManager: "7.2",
  DisableVerticalSwipes: "7.7"
};
function Be(e) {
  return q().isVersionAtLeast(Se[e]);
}
function ve() {
  const e = q(), {
    initData: a,
    initDataUnsafe: t,
    version: o,
    isReady: s,
    platform: n,
    isPlatform: c,
    sendData: S,
    ready: B,
    close: y
  } = h("8.0"), u = c("unknown"), b = !u && a === "";
  return {
    initData: a,
    initDataUnsafe: t,
    version: o,
    platform: n,
    isVersionAtLeast: e.isVersionAtLeast,
    sendData: S,
    ready: B,
    close: y,
    isReady: s,
    isPlatform: c,
    isPlatformUnknown: u,
    isFeatureSupported: Be,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onEvent: D,
    /**
     * @deprecated
     */
    canSendData: b
  };
}
function Ce() {
  const e = w("8.0");
  return {
    isBackButtonVisible: e.isVisible,
    showBackButton: e.show,
    hideBackButton: e.hide,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onBackButtonClicked: F
  };
}
function Ae() {
  const {
    isInited: e,
    isBiometricAvailable: a,
    biometricType: t,
    isAccessRequested: o,
    isAccessGranted: s,
    deviceId: n,
    isBiometricTokenSaved: c,
    init: S,
    authenticate: B,
    requestAccess: y,
    openSettings: u,
    updateToken: b
  } = P("8.0");
  return {
    isBiometricInited: e,
    isBiometricAvailable: a,
    biometricType: t,
    isBiometricAccessRequested: o,
    isBiometricAccessGranted: s,
    isBiometricTokenSaved: c,
    biometricDeviceId: n,
    initBiometric: S,
    requestBiometricAccess: y,
    authenticateBiometric: B,
    updateBiometricToken: b,
    openBiometricSettings: u,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onBiometricManagerUpdated: R,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onBiometricAuthRequested: $,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onBiometricTokenUpdated: I
  };
}
function ke() {
  const { readText: e } = O("8.0");
  return {
    readTextFromClipboard: e,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onClipboardTextReceived: U
  };
}
function xe() {
  const { isClosingConfirmationEnabled: e } = h("8.0");
  return {
    isClosingConfirmationEnabled: e,
    enableClosingConfirmation() {
      e.value = !0;
    },
    disableClosingConfirmation() {
      e.value = !1;
    }
  };
}
function _e() {
  const e = j("8.0");
  return {
    setStorageItem: e.setItem,
    getStorageItem: e.getItem,
    getStorageItems: e.getItems,
    removeStorageItem: e.removeItem,
    removeStorageItems: e.removeItems,
    getStorageKeys: e.getKeys
  };
}
function we() {
  const { impactOccurred: e, notificationOccurred: a, selectionChanged: t } = Q("8.0");
  return {
    impactOccurred: e,
    notificationOccurred: a,
    selectionChanged: t
  };
}
function Pe() {
  const e = W("8.0");
  return {
    mainButtonText: e.text,
    mainButtonColor: e.color,
    mainButtonTextColor: e.textColor,
    isMainButtonVisible: e.isVisible,
    isMainButtonActive: e.isActive,
    isMainButtonProgressVisible: e.isProgressVisible,
    setMainButtonText(a) {
      e.text.value = a;
    },
    showMainButton: e.show,
    hideMainButton: e.hide,
    enableMainButton: e.enable,
    disableMainButton: e.disable,
    showMainButtonProgress: e.showProgress,
    hideMainButtonProgress: e.hideProgress,
    setMainButtonParams: e.setParams,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onMainButtonClicked: z
  };
}
function Te() {
  const { switchInlineQuery: e, openLink: a, openTelegramLink: t, openInvoice: o } = h("8.0");
  return {
    switchInlineQuery: e,
    openLink: a,
    openTelegramLink: t,
    openInvoice: o,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onInvoiceClosed: H
  };
}
function We() {
  const { showPopup: e, showAlert: a, showConfirm: t } = k("8.0");
  return {
    showPopup: e,
    showAlert: a,
    showConfirm: t,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onPopupClosed: N
  };
}
function Me() {
  const e = M("8.0");
  return {
    showScanQrPopup: e.show,
    closeScanQrPopup: e.close,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onQrTextReceived: J,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onScanQrPopupClosed: G
  };
}
function Le() {
  const { requestContact: e, requestWriteAccess: a } = h("8.0");
  return {
    requestContact: e,
    requestWriteAccess: a,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onContactRequested: X,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onWriteAccessRequested: K
  };
}
function qe(e, a) {
  const t = a.serialize ?? JSON.stringify, o = _(""), s = (u) => {
    o.value = u, console.error(u);
  }, n = _(!1), { initData: c, initDataUnsafe: S, sendData: B, close: y } = h("8.0");
  return {
    error: o,
    isLoading: n,
    execute: () => {
      B(t(e)), setTimeout(
        () => s(
          "Telegram.WebApp.sendData is only available for custom keyboards."
        ),
        1e3
      );
    },
    executeHttp: async (u, b = {}) => {
      const V = b.closeAfter ?? !0;
      n.value = !0;
      try {
        const f = await fetch(u, {
          method: "POST",
          body: JSON.stringify({
            initData: c,
            initDataUnsafe: S,
            data: t(e)
          })
        });
        return f.ok || s(`${f.status} ${f.statusText}`), f.ok && V && y(), f;
      } catch (f) {
        s(String(f));
      } finally {
        n.value = !1;
      }
    }
  };
}
function Ve() {
  const e = L("8.0");
  return {
    isSettingsButtonVisible: e.isVisible,
    showSettingsButton: e.show,
    hideSettingsButton: e.hide,
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onSettingsButtonClicked: Y
  };
}
function Ee() {
  const { shareToStory: e } = h("8.0");
  return {
    shareToStory: e
  };
}
function De() {
  const {
    colorScheme: e,
    themeParams: a,
    headerColor: t,
    backgroundColor: o
  } = Z("8.0");
  return {
    colorScheme: e,
    themeParams: a,
    headerColor: t,
    backgroundColor: o,
    setHeaderColor(s) {
      s && (t.value = s);
    },
    setBackgroundColor(s) {
      s && (o.value = s);
    },
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onThemeChanged: ee
  };
}
function Fe() {
  const {
    isExpanded: e,
    expand: a,
    viewportHeight: t,
    viewportStableHeight: o,
    isVerticalSwipesEnabled: s
  } = x("8.0");
  return {
    isExpanded: e,
    viewportHeight: t,
    viewportStableHeight: o,
    expand: a,
    isVerticalSwipesEnabled: s,
    enableVerticalSwipes() {
      s.value = !0;
    },
    disableVerticalSwipes() {
      s.value = !1;
    },
    /**
     * @deprecated import directly from `vue-tg` instead.
     */
    onViewportChanged: T
  };
}
const Ie = {
  install(e) {
    e.component("TgAlert", te), e.component("TgBackButton", se), e.component("TgBiometricManager", ne), e.component("TgClosingConfirmation", ae), e.component("TgConfirm", oe), e.component("TgExpandedViewport", ie), e.component("TgFullscreenViewport", re), e.component("TgMainButton", ce), e.component("TgPopup", le), e.component("TgScanQr", ue), e.component("TgSecondaryButton", de), e.component("TgSettingsButton", pe), e.component("TgShareWidget", he), e.component("TgPostWidget", fe), e.component("TgLoginWidget", ge), e.component("TgDiscussionWidget", me);
  }
};
export {
  te as Alert,
  se as BackButton,
  ne as BiometricManager,
  ae as ClosingConfirmation,
  oe as Confirm,
  me as DiscussionWidget,
  ie as ExpandedViewport,
  re as FullscreenViewport,
  ge as LoginWidget,
  ce as MainButton,
  le as Popup,
  fe as PostWidget,
  ue as ScanQr,
  de as SecondaryButton,
  pe as SettingsButton,
  he as ShareWidget,
  Ie as VueTelegramPlugin,
  Oe as isVersionAtLeast,
  Ue as onAccelerometerChanged,
  je as onAccelerometerFailed,
  Qe as onAccelerometerStarted,
  ze as onAccelerometerStopped,
  He as onActivated,
  F as onBackButtonClicked,
  $ as onBiometricAuthRequested,
  R as onBiometricManagerUpdated,
  I as onBiometricTokenUpdated,
  U as onClipboardTextReceived,
  X as onContactRequested,
  Ne as onContentSafeAreaChanged,
  Ge as onDeactivated,
  Je as onDeviceOrientationChanged,
  Ke as onDeviceOrientationFailed,
  Xe as onDeviceOrientationStarted,
  Ye as onDeviceOrientationStopped,
  Ze as onEmojiStatusAccessRequested,
  et as onEmojiStatusFailed,
  tt as onEmojiStatusSet,
  D as onEvent,
  st as onFileDownloadRequested,
  nt as onFullscreenChanged,
  at as onFullscreenFailed,
  ot as onGyroscopeChanged,
  it as onGyroscopeFailed,
  rt as onGyroscopeStarted,
  ct as onGyroscopeStopped,
  lt as onHomeScreenAdded,
  ut as onHomeScreenChecked,
  H as onInvoiceClosed,
  dt as onLocationManagerUpdated,
  pt as onLocationRequested,
  z as onMainButtonClicked,
  N as onPopupClosed,
  J as onQrTextReceived,
  mt as onSafeAreaChanged,
  G as onScanQrPopupClosed,
  gt as onSecondaryButtonClicked,
  Y as onSettingsButtonClicked,
  ft as onShareMessageFailed,
  ht as onShareMessageSent,
  ee as onThemeChanged,
  T as onViewportChanged,
  K as onWriteAccessRequested,
  Bt as useAccelerometer,
  yt as useBackButton,
  bt as useBiometricManager,
  vt as useClipboard,
  Ct as useCloudStorage,
  At as useDeviceOrientation,
  kt as useDeviceStorage,
  xt as useEmojiStatus,
  _t as useGyroscope,
  wt as useHapticFeedback,
  Pt as useHomeScreen,
  Tt as useLocationManager,
  Wt as useMainButton,
  Mt as useMiniApp,
  Lt as usePopup,
  qt as useQrScanner,
  Vt as useSecondaryButton,
  Et as useSecureStorage,
  Dt as useSettingsButton,
  Ft as useTheme,
  It as useViewport,
  ve as useWebApp,
  Ce as useWebAppBackButton,
  Ae as useWebAppBiometricManager,
  ke as useWebAppClipboard,
  xe as useWebAppClosingConfirmation,
  _e as useWebAppCloudStorage,
  we as useWebAppHapticFeedback,
  Pe as useWebAppMainButton,
  Te as useWebAppNavigation,
  We as useWebAppPopup,
  Me as useWebAppQrScanner,
  Le as useWebAppRequests,
  qe as useWebAppSendData,
  Ve as useWebAppSettingsButton,
  Ee as useWebAppShare,
  De as useWebAppTheme,
  Fe as useWebAppViewport
};
