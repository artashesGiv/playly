import { WebAppCallback } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onClipboardTextReceived } from '../events';
type v64 = ReturnType<typeof useClipboard64>;
export type Schema = {
    '6.0': Merge<Partial<v64>, object>;
    '6.4': Merge<Schema['6.0'], v64>;
};
export type Clipboard = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'6.4'>>;
}) | (Schema['6.4'] & {
    version: BotApiVersionRange<'6.4', LATEST_VERSION>;
});
declare function useClipboard64(): {
    readText: {
        (): ReturnType<() => Promise<string>>;
        (callback?: WebAppCallback["readTextFromClipboard"]): void;
    };
    onReadText: typeof onClipboardTextReceived;
};
export declare function useClipboard<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<Clipboard, Version, keyof Schema>;
export {};
