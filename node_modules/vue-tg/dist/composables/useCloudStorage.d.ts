import { CloudStorageCallback } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
type v69 = ReturnType<typeof useCloudStorage69>;
export type Schema = {
    '6.0': Merge<Partial<v69>, object>;
    '6.9': Merge<Schema['6.0'], v69>;
};
export type CloudStorage = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'6.9'>>;
}) | (Schema['6.9'] & {
    version: BotApiVersionRange<'6.9', LATEST_VERSION>;
});
declare function useCloudStorage69(): {
    setItem: {
        (key: string, value: string): ReturnType<(key: string, value: string) => Promise<true>>;
        (key: string, value: string, callback?: CloudStorageCallback["setItem"]): void;
    };
    getItem: {
        (key: string): ReturnType<(key: string) => Promise<string>>;
        (key: string, callback?: CloudStorageCallback["getItem"]): void;
    };
    getItems: {
        (keys: string[]): ReturnType<(keys: string[]) => Promise<Record<string, string>>>;
        (keys: string[], callback?: CloudStorageCallback["getItems"]): void;
    };
    removeItem: {
        (key: string): ReturnType<(key: string) => Promise<true>>;
        (key: string, callback?: CloudStorageCallback["removeItem"]): void;
    };
    removeItems: {
        (keys: string[]): ReturnType<(keys: string[]) => Promise<true>>;
        (keys: string[], callback?: CloudStorageCallback["removeItems"]): void;
    };
    getKeys: {
        (): ReturnType<() => Promise<string[]>>;
        (callback?: CloudStorageCallback["getKeys"]): void;
    };
};
export declare function useCloudStorage<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<CloudStorage, Version, keyof Schema>;
export {};
