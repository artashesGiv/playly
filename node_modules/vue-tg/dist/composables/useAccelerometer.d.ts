import { AccelerometerCallback, AccelerometerStartParams } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onAccelerometerChanged, onAccelerometerFailed, onAccelerometerStarted, onAccelerometerStopped } from '../events';
type v60 = ReturnType<typeof useAccelerometer60>;
type v80 = ReturnType<typeof useAccelerometer80>;
export type Schema = {
    '6.0': Merge<Partial<v80>, v60>;
    '8.0': Merge<Schema['6.0'], v80>;
};
export type Accelerometer = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'8.0'>>;
}) | (Schema['8.0'] & {
    version: BotApiVersionRange<'8.0', LATEST_VERSION>;
});
declare function useAccelerometer60(): {
    isStarted: Readonly<import('vue').Ref<boolean, boolean>>;
    x: Readonly<import('vue').Ref<number, number>>;
    y: Readonly<import('vue').Ref<number, number>>;
    z: Readonly<import('vue').Ref<number, number>>;
};
declare function useAccelerometer80(): {
    start: {
        (params: AccelerometerStartParams): ReturnType<(params: AccelerometerStartParams) => Promise<boolean>>;
        (params: AccelerometerStartParams, callback?: AccelerometerCallback["start"]): void;
    };
    stop: {
        (): ReturnType<() => Promise<boolean>>;
        (callback?: AccelerometerCallback["stop"]): void;
    };
    onStart: typeof onAccelerometerStarted;
    onStop: typeof onAccelerometerStopped;
    onChange: typeof onAccelerometerChanged;
    onFail: typeof onAccelerometerFailed;
};
export declare function useAccelerometer<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<Accelerometer, Version, keyof Schema>;
export {};
