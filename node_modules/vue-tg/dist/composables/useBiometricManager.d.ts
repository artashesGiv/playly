import { BiometricAuthenticateParams, BiometricManagerCallback, BiometricRequestAccessParams } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onBiometricAuthRequested, onBiometricManagerUpdated, onBiometricTokenUpdated } from '../events';
type v60 = ReturnType<typeof useBiometricManager60>;
type v72 = ReturnType<typeof useBiometricManager72>;
export type Schema = {
    '6.0': Merge<Partial<v72>, v60>;
    '7.2': Merge<Schema['6.0'], v72>;
};
export type BiometricManager = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'7.2'>>;
}) | (Schema['7.2'] & {
    version: BotApiVersionRange<'7.2', LATEST_VERSION>;
});
declare function useBiometricManager60(): {
    isInited: Readonly<import('vue').Ref<boolean, boolean>>;
    isBiometricAvailable: Readonly<import('vue').Ref<boolean, boolean>>;
    biometricType: Readonly<import('vue').Ref<"unknown" | "finger" | "face", "unknown" | "finger" | "face">>;
    isAccessRequested: Readonly<import('vue').Ref<boolean, boolean>>;
    isAccessGranted: Readonly<import('vue').Ref<boolean, boolean>>;
    isBiometricTokenSaved: Readonly<import('vue').Ref<boolean, boolean>>;
    deviceId: Readonly<import('vue').Ref<string, string>>;
};
declare function useBiometricManager72(): {
    init: {
        (): ReturnType<() => Promise<void>>;
        (callback?: BiometricManagerCallback["init"]): void;
    };
    requestAccess: {
        (params: BiometricRequestAccessParams): ReturnType<(params: BiometricRequestAccessParams) => Promise<boolean>>;
        (params: BiometricRequestAccessParams, callback?: BiometricManagerCallback["requestAccess"]): void;
    };
    authenticate: {
        (params: BiometricAuthenticateParams): ReturnType<(params: BiometricAuthenticateParams) => Promise<{
            isAuthenticated: boolean;
            token: string | undefined;
        }>>;
        (params: BiometricAuthenticateParams, callback?: BiometricManagerCallback["authenticate"]): void;
    };
    updateToken: {
        (token: string): ReturnType<(token: string) => Promise<boolean>>;
        (token: string, callback?: BiometricManagerCallback["updateBiometricToken"]): void;
    };
    openSettings: () => void;
    onManagerUpdate: typeof onBiometricManagerUpdated;
    onAuthRequest: typeof onBiometricAuthRequested;
    onTokenUpdate: typeof onBiometricTokenUpdated;
};
export declare function useBiometricManager<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<BiometricManager, Version, keyof Schema>;
export {};
