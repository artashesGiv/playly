import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onMainButtonClicked } from '../events';
type v60 = ReturnType<typeof useMainButton60>;
type v710 = ReturnType<typeof useMainButton710>;
export type Schema = {
    '6.0': Merge<Partial<v710>, v60>;
    '7.10': Merge<Schema['6.0'], v710>;
};
export type MainButton = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'7.10'>>;
}) | (Schema['7.10'] & {
    version: BotApiVersionRange<'7.10', LATEST_VERSION>;
});
declare function useMainButton60(): {
    text: import('vue').WritableComputedRef<string, string>;
    color: import('vue').WritableComputedRef<string, string>;
    textColor: import('vue').WritableComputedRef<string, string>;
    isVisible: import('vue').WritableComputedRef<boolean, boolean>;
    isActive: import('vue').WritableComputedRef<boolean, boolean>;
    isProgressVisible: import('vue').WritableComputedRef<boolean, boolean>;
    hasShineEffect: Readonly<import('vue').Ref<boolean, boolean>>;
    show: () => void;
    hide: () => void;
    enable: () => void;
    disable: () => void;
    showProgress: (leaveActive?: boolean | undefined) => void;
    hideProgress: () => void;
    setParams: (params: {
        text?: string;
        color?: string;
        text_color?: string;
        has_shine_effect?: boolean;
        position?: "left" | "right" | "top" | "bottom";
        is_active?: boolean;
        is_visible?: boolean;
    }) => void;
    onClick: typeof onMainButtonClicked;
};
declare function useMainButton710(): {
    hasShineEffect: import('vue').WritableComputedRef<boolean, boolean>;
};
export declare function useMainButton<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<MainButton, Version, keyof Schema>;
export {};
