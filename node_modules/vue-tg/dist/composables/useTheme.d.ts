import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onThemeChanged } from '../events';
type v60 = ReturnType<typeof useTheme60>;
type v61 = ReturnType<typeof useTheme61>;
type v710 = ReturnType<typeof useTheme710>;
export type Schema = {
    '6.0': Merge<Partial<v61 & v710>, v60>;
    '6.1': Merge<Schema['6.0'], v61>;
    '7.10': Merge<Schema['6.1'], v710>;
};
export type Theme = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'6.1'>>;
}) | (Schema['6.1'] & {
    version: BotApiVersionRange<'6.1', BotApiPrevVersion<'7.10'>>;
}) | (Schema['7.10'] & {
    version: BotApiVersionRange<'7.10', LATEST_VERSION>;
});
declare function useTheme60(): {
    colorScheme: Readonly<import('vue').Ref<string, string>>;
    themeParams: Readonly<import('vue').Ref<{
        readonly bg_color?: string | undefined;
        readonly text_color?: string | undefined;
        readonly hint_color?: string | undefined;
        readonly link_color?: string | undefined;
        readonly button_color?: string | undefined;
        readonly button_text_color?: string | undefined;
        readonly secondary_bg_color?: string | undefined;
        readonly header_bg_color?: string | undefined;
        readonly bottom_bar_bg_color?: string | undefined;
        readonly accent_text_color?: string | undefined;
        readonly section_bg_color?: string | undefined;
        readonly section_header_text_color?: string | undefined;
        readonly section_separator_color?: string | undefined;
        readonly subtitle_text_color?: string | undefined;
        readonly destructive_text_color?: string | undefined;
    }, {
        readonly bg_color?: string | undefined;
        readonly text_color?: string | undefined;
        readonly hint_color?: string | undefined;
        readonly link_color?: string | undefined;
        readonly button_color?: string | undefined;
        readonly button_text_color?: string | undefined;
        readonly secondary_bg_color?: string | undefined;
        readonly header_bg_color?: string | undefined;
        readonly bottom_bar_bg_color?: string | undefined;
        readonly accent_text_color?: string | undefined;
        readonly section_bg_color?: string | undefined;
        readonly section_header_text_color?: string | undefined;
        readonly section_separator_color?: string | undefined;
        readonly subtitle_text_color?: string | undefined;
        readonly destructive_text_color?: string | undefined;
    }>>;
    headerColor: Readonly<import('vue').Ref<string, string>>;
    backgroundColor: Readonly<import('vue').Ref<string, string>>;
    bottomBarColor: Readonly<import('vue').Ref<string, string>>;
    onChange: typeof onThemeChanged;
};
declare function useTheme61(): {
    headerColor: import('vue').WritableComputedRef<string, (string & {}) | "bg_color" | "secondary_bg_color">;
    backgroundColor: import('vue').WritableComputedRef<string, (string & {}) | "bg_color" | "secondary_bg_color">;
};
declare function useTheme710(): {
    bottomBarColor: import('vue').WritableComputedRef<string, (string & {}) | "bg_color" | "secondary_bg_color" | "bottom_bar_bg_color">;
};
export declare function useTheme<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<Theme, Version, keyof Schema>;
export {};
