import { LocationManagerCallback } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onLocationManagerUpdated, onLocationRequested } from '../events';
type v60 = ReturnType<typeof useLocationManager60>;
type v80 = ReturnType<typeof useLocationManager80>;
export type Schema = {
    '6.0': Merge<Partial<v80>, v60>;
    '8.0': Merge<Schema['6.0'], v80>;
};
export type LocationManager = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'8.0'>>;
}) | (Schema['8.0'] & {
    version: BotApiVersionRange<'8.0', LATEST_VERSION>;
});
declare function useLocationManager60(): {
    isInited: Readonly<import('vue').Ref<boolean, boolean>>;
    isLocationAvailable: Readonly<import('vue').Ref<boolean, boolean>>;
    isAccessRequested: Readonly<import('vue').Ref<boolean, boolean>>;
    isAccessGranted: Readonly<import('vue').Ref<boolean, boolean>>;
};
declare function useLocationManager80(): {
    init: {
        (): ReturnType<() => Promise<void>>;
        (callback?: LocationManagerCallback["init"]): void;
    };
    getLocation: {
        (): ReturnType<() => Promise<import('../sdk').LocationData | null>>;
        (callback?: LocationManagerCallback["getLocation"]): void;
    };
    openSettings: () => void;
    onManagerUpdate: typeof onLocationManagerUpdated;
    onRequest: typeof onLocationRequested;
};
export declare function useLocationManager<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<LocationManager, Version, keyof Schema>;
export {};
