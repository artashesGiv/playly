import { DeviceOrientationCallback, DeviceOrientationStartParams } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onDeviceOrientationChanged, onDeviceOrientationFailed, onDeviceOrientationStarted, onDeviceOrientationStopped } from '../events';
type v60 = ReturnType<typeof useDeviceOrientation60>;
type v80 = ReturnType<typeof useDeviceOrientation80>;
export type Schema = {
    '6.0': Merge<Partial<v80>, v60>;
    '8.0': Merge<Schema['6.0'], v80>;
};
export type DeviceOrientation = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'8.0'>>;
}) | (Schema['8.0'] & {
    version: BotApiVersionRange<'8.0', LATEST_VERSION>;
});
declare function useDeviceOrientation60(): {
    isStarted: Readonly<import('vue').Ref<boolean, boolean>>;
    absolute: Readonly<import('vue').Ref<boolean, boolean>>;
    alpha: Readonly<import('vue').Ref<number, number>>;
    beta: Readonly<import('vue').Ref<number, number>>;
    gamma: Readonly<import('vue').Ref<number, number>>;
};
declare function useDeviceOrientation80(): {
    start: {
        (params: DeviceOrientationStartParams): ReturnType<(params: DeviceOrientationStartParams) => Promise<boolean>>;
        (params: DeviceOrientationStartParams, callback?: DeviceOrientationCallback["start"]): void;
    };
    stop: {
        (): ReturnType<() => Promise<boolean>>;
        (callback?: DeviceOrientationCallback["stop"]): void;
    };
    onStart: typeof onDeviceOrientationStarted;
    onStop: typeof onDeviceOrientationStopped;
    onChange: typeof onDeviceOrientationChanged;
    onFail: typeof onDeviceOrientationFailed;
};
export declare function useDeviceOrientation<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<DeviceOrientation, Version, keyof Schema>;
export {};
