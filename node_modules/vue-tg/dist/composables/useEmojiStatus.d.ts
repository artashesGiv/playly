import { EmojiStatusParams, WebAppCallback } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onEmojiStatusAccessRequested, onEmojiStatusFailed, onEmojiStatusSet } from '../events';
type v80 = ReturnType<typeof useEmojiStatus80>;
export type Schema = {
    '6.0': Merge<Partial<v80>, object>;
    '8.0': Merge<Schema['6.0'], v80>;
};
export type EmojiStatus = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'8.0'>>;
}) | (Schema['8.0'] & {
    version: BotApiVersionRange<'8.0', LATEST_VERSION>;
});
declare function useEmojiStatus80(): {
    set: {
        (custom_emoji_id: string, params: EmojiStatusParams): ReturnType<(custom_emoji_id: string, params?: EmojiStatusParams | undefined) => Promise<boolean>>;
        (custom_emoji_id: string, params: EmojiStatusParams, callback?: WebAppCallback["setEmojiStatus"]): void;
    };
    requestAccess: {
        (): ReturnType<() => Promise<boolean>>;
        (callback?: WebAppCallback["requestEmojiStatusAccess"]): void;
    };
    onSet: typeof onEmojiStatusSet;
    onFail: typeof onEmojiStatusFailed;
    onAccessRequest: typeof onEmojiStatusAccessRequested;
};
export declare function useEmojiStatus<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<EmojiStatus, Version, keyof Schema>;
export {};
