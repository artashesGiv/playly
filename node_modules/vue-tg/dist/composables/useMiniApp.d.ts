import { DownloadFileParams, WebAppCallback } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onActivated, onContactRequested, onDeactivated, onFileDownloadRequested, onInvoiceClosed, onShareMessageFailed, onShareMessageSent, onWriteAccessRequested } from '../events';
type v60 = ReturnType<typeof useMiniApp60>;
type v61 = ReturnType<typeof useMiniApp61>;
type v62 = ReturnType<typeof useMiniApp62>;
type v67 = ReturnType<typeof useMiniApp67>;
type v69 = ReturnType<typeof useMiniApp69>;
type v78 = ReturnType<typeof useMiniApp78>;
type v80 = ReturnType<typeof useMiniApp80>;
type v91 = ReturnType<typeof useMiniApp91>;
export type Schema = {
    '6.0': Merge<Partial<v61 & v62 & v67 & v69 & v78 & v80 & v91>, v60>;
    '6.1': Merge<Schema['6.0'], v61>;
    '6.2': Merge<Schema['6.1'], v62>;
    '6.7': Merge<Schema['6.2'], v67>;
    '6.9': Merge<Schema['6.7'], v69>;
    '7.8': Merge<Schema['6.9'], v78>;
    '8.0': Merge<Schema['7.8'], v80>;
    '9.1': Merge<Schema['8.0'], v91>;
};
export type MiniApp = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'6.1'>>;
}) | (Schema['6.1'] & {
    version: BotApiVersionRange<'6.1', BotApiPrevVersion<'6.2'>>;
}) | (Schema['6.2'] & {
    version: BotApiVersionRange<'6.2', BotApiPrevVersion<'6.7'>>;
}) | (Schema['6.7'] & {
    version: BotApiVersionRange<'6.7', BotApiPrevVersion<'6.9'>>;
}) | (Schema['6.9'] & {
    version: BotApiVersionRange<'6.9', BotApiPrevVersion<'7.8'>>;
}) | (Schema['7.8'] & {
    version: BotApiVersionRange<'7.8', BotApiPrevVersion<'8.0'>>;
}) | (Schema['8.0'] & {
    version: BotApiVersionRange<'8.0', BotApiPrevVersion<'9.1'>>;
}) | (Schema['9.1'] & {
    version: BotApiVersionRange<'9.1', LATEST_VERSION>;
});
declare function useMiniApp60(): {
    initData: string;
    initDataUnsafe: import('../sdk').WebAppInitData;
    platform: string;
    sendData: (data: string) => void;
    openLink: (url: string, options?: {
        try_instant_view: boolean;
    }) => void;
    openTelegramLink: (url: string) => void;
    ready: () => void;
    close: () => void;
    isClosingConfirmationEnabled: Readonly<import('vue').Ref<boolean, boolean>>;
    isActive: Readonly<import('vue').Ref<boolean, boolean>>;
    isReady: Readonly<import('vue').Ref<boolean, boolean>>;
    isPlatform: typeof isPlatform;
};
declare function useMiniApp61(): {
    openInvoice: {
        (url: string): ReturnType<(url: string) => Promise<"cancelled" | "paid" | "failed" | "pending">>;
        (url: string, callback?: WebAppCallback["openInvoice"]): void;
    };
    onInvoiceClose: typeof onInvoiceClosed;
};
declare function useMiniApp62(): {
    isClosingConfirmationEnabled: import('vue').WritableComputedRef<boolean, boolean>;
};
declare function useMiniApp67(): {
    switchInlineQuery: (query: string, choose_chat_types?: string[]) => void;
};
declare function useMiniApp69(): {
    requestContact: {
        (): ReturnType<() => Promise<boolean>>;
        (callback?: WebAppCallback["requestContact"]): void;
    };
    requestWriteAccess: {
        (): ReturnType<() => Promise<boolean>>;
        (callback?: WebAppCallback["requestWriteAccess"]): void;
    };
    onContactRequest: typeof onContactRequested;
    onWriteAccessRequest: typeof onWriteAccessRequested;
};
declare function useMiniApp78(): {
    shareToStory: (media_url: string, params?: import('../sdk').StoryShareParams) => void;
};
declare function useMiniApp80(): {
    shareMessage: {
        (msg_id: string): ReturnType<(msg_id: string) => Promise<boolean>>;
        (msg_id: string, callback?: WebAppCallback["shareMessage"]): void;
    };
    downloadFile: {
        (params: DownloadFileParams): ReturnType<(params: DownloadFileParams) => Promise<boolean>>;
        (params: DownloadFileParams, callback?: WebAppCallback["downloadFile"]): void;
    };
    onActive: typeof onActivated;
    onDeactive: typeof onDeactivated;
    onShareMessageSent: typeof onShareMessageSent;
    onShareMessageFail: typeof onShareMessageFailed;
    onFileDownloadRequest: typeof onFileDownloadRequested;
};
declare function useMiniApp91(): {
    hideKeyboard: () => void;
};
export declare function useMiniApp<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<MiniApp, Version, keyof Schema>;
export declare function isVersionAtLeast(version: BotApiVersion): boolean;
declare function isPlatform(name: (string & Record<never, never>) | 'unknown' | 'android' | 'android_x' | 'ios' | 'macos' | 'tdesktop' | 'weba' | 'webk' | 'unigram'): boolean;
export {};
