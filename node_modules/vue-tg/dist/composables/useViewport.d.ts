import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onContentSafeAreaChanged, onFullscreenChanged, onFullscreenFailed, onSafeAreaChanged, onViewportChanged } from '../events';
type v60 = ReturnType<typeof useViewport60>;
type v77 = ReturnType<typeof useViewport77>;
type v80 = ReturnType<typeof useViewport80>;
export type Schema = {
    '6.0': Merge<Partial<v77 & v80>, v60>;
    '7.7': Merge<Schema['6.0'], v77>;
    '8.0': Merge<Schema['7.7'], v80>;
};
export type Viewport = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'7.7'>>;
}) | (Schema['7.7'] & {
    version: BotApiVersionRange<'7.7', BotApiPrevVersion<'8.0'>>;
}) | (Schema['8.0'] & {
    version: BotApiVersionRange<'8.0', LATEST_VERSION>;
});
declare function useViewport60(): {
    expand: () => void;
    isExpanded: Readonly<import('vue').Ref<boolean, boolean>>;
    viewportHeight: Readonly<import('vue').Ref<number, number>>;
    viewportStableHeight: Readonly<import('vue').Ref<number, number>>;
    isFullscreen: Readonly<import('vue').Ref<boolean, boolean>>;
    isOrientationLocked: Readonly<import('vue').Ref<boolean, boolean>>;
    isVerticalSwipesEnabled: Readonly<import('vue').Ref<boolean, boolean>>;
    safeAreaInset: Readonly<import('vue').Ref<{
        readonly top: number;
        readonly bottom: number;
        readonly left: number;
        readonly right: number;
    }, {
        readonly top: number;
        readonly bottom: number;
        readonly left: number;
        readonly right: number;
    }>>;
    contentSafeAreaInset: Readonly<import('vue').Ref<{
        readonly top: number;
        readonly bottom: number;
        readonly left: number;
        readonly right: number;
    }, {
        readonly top: number;
        readonly bottom: number;
        readonly left: number;
        readonly right: number;
    }>>;
    onChange: typeof onViewportChanged;
};
declare function useViewport77(): {
    isVerticalSwipesEnabled: import('vue').WritableComputedRef<boolean, boolean>;
};
declare function useViewport80(): {
    isFullscreen: import('vue').WritableComputedRef<boolean, boolean>;
    isOrientationLocked: import('vue').WritableComputedRef<boolean, boolean>;
    onSafeAreaChange: typeof onSafeAreaChanged;
    onContentSafeAreaChange: typeof onContentSafeAreaChanged;
    onFullscreenChange: typeof onFullscreenChanged;
    onFullscreenFail: typeof onFullscreenFailed;
};
export declare function useViewport<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<Viewport, Version, keyof Schema>;
export {};
