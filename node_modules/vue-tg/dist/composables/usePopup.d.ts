import { PopupParams, WebAppCallback } from '../sdk';
import { BotApiPrevVersion, BotApiVersion, BotApiVersionRange, LATEST_VERSION, Merge, VersionedReturnType } from '../types';
import { onPopupClosed } from '../events';
type v62 = ReturnType<typeof usePopup62>;
export type Schema = {
    '6.0': Merge<Partial<v62>, object>;
    '6.2': Merge<Schema['6.0'], v62>;
};
export type Popup = (Schema['6.0'] & {
    version: BotApiVersionRange<'6.0', BotApiPrevVersion<'6.2'>>;
}) | (Schema['6.2'] & {
    version: BotApiVersionRange<'6.2', LATEST_VERSION>;
});
declare function usePopup62(): {
    showConfirm: {
        (message: string): ReturnType<(message: string) => Promise<boolean>>;
        (message: string, callback?: WebAppCallback["showConfirm"]): void;
    };
    showAlert: {
        (message: string): ReturnType<(message: string) => Promise<void>>;
        (message: string, callback?: WebAppCallback["showAlert"]): void;
    };
    showPopup: {
        (params: PopupParams): ReturnType<(params: PopupParams) => Promise<string>>;
        (params: PopupParams, callback?: WebAppCallback["showPopup"]): void;
    };
    onClose: typeof onPopupClosed;
};
export declare function usePopup<Version extends BotApiVersion>(baseVersion: Version): VersionedReturnType<Popup, Version, keyof Schema>;
export {};
